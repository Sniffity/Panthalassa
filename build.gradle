buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath(group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true) { exclude group: 'org.apache.log4j' }
        classpath 'org.apache.logging.log4j:log4j-api:2.11.2'
        classpath 'org.apache.logging.log4j:log4j-core:2.11.2'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${mod_version}-${minecraft_version}"
group = 'com.github.sniffity.panthalassa'
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=" + project.getProperty('mod_id') + ".mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            mods {panthalassa {source sourceSets.main}}
        }
        server {
            workingDirectory project.file('run')
            arg "-mixin.config=" + project.getProperty('mod_id') + ".mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                panthalassa {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            args '--mod', 'panthalassa', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            arg "-mixin.config=" + project.getProperty('mod_id') + ".mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                panthalassa  {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {url = "https://maven.blamejared.com"}
    maven {url = 'https://alcatrazescapee.jfrog.io/artifactory/mods'}
    maven {url = 'https://maven.parchmentmc.org' }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-71.1")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-71.1:api")
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.57')
    runtimeOnly fg.deobf("com.alcatrazescapee:cyanide-forge-1.18.2:2.1.0") {transitive = false}
    compileOnly fg.deobf("mezz.jei:jei-1.18.2:9.5.5.174:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2:9.5.5.174")
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
                         mod_authors: mod_authors, mod_description: mod_description,
                         minecraft_version_range: minecraft_version_range, forge_version_range: forge_version_range,
                         loader_version_range: loader_version_range]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'